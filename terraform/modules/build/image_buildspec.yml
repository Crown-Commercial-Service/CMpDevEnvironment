version: 0.2

phases:
  pre_build:
    commands:
      - $(aws ecr get-login --no-include-email)
      - if [ -e CCS_VERSION ]; then export CCS_VERSION=$(cat CCS_VERSION); else export CCS_VERSION=0.0.1; fi
      - if [ -e pipeline_pre_build.sh ]; then chmod +x pipeline_pre_build.sh && . ./pipeline_pre_build.sh; else exit 0; fi
      - if [ -e Dockerfile ]; then
          for SSM_ALIAS in $(aws ssm describe-parameters --query 'Parameters[?Name!=`null`]|[?(starts_with(Name, `/ImageEnvironment/${container_prefix}/${container_name}/`) || starts_with(Name, `/ImageEnvironment/global/`))][Name]' --output text);
          do
            SSM_ENV="$${SSM_ALIAS##*/}";
            SSM_VALUE=`aws ssm get-parameter --with-decryption --name $SSM_ALIAS --query "Parameter.Value"`;
            export $SSM_ENV="$SSM_VALUE";
          done;
        fi
  build:
    commands:
      - docker build --tag "${container_prefix}/${container_name}" .
  post_build:
    commands:
      - if [ -e pipeline_post_build.sh ]; then chmod +x pipeline_post_build.sh && . ./pipeline_post_build.sh; else exit 0; fi
      - docker tag "${container_prefix}/${container_name}" "${base_image_name}:$CODEBUILD_RESOLVED_SOURCE_VERSION"
      - docker push "${base_image_name}:$CODEBUILD_RESOLVED_SOURCE_VERSION"
      - docker tag "${container_prefix}/${container_name}" "${base_image_name}:$CCS_VERSION"
      - docker push "${base_image_name}:$CCS_VERSION"
      - docker tag "${container_prefix}/${container_name}" "${deploy_image_name}" 
      - docker push "${deploy_image_name}"
